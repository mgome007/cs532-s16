   #[1]devbrainhack ¬ª Feed [2]devbrainhack ¬ª Comments Feed

   [3]Skip to content

[4]devbrainhack

   Poignant guides, making software work
   (BUTTON) Menu and widgets

Hi, I‚Äôm Alex

   My place to vent, rave, rant, praise. Peace, Love, and Dev. Gratuitous
   high-fiver.

Recent Work

     * [5]In Progress: MEAN Stack patterns 1.0
     * [6]Hackathon: NBCU2015 and Telemira
     * [7]Update: Manydoge.com back up!
     * [8]Recent work: BDD with AngularJS and Protractor
     * [9]Recent Work ‚Äì Header Grab Bag

[10]Recent work: sindresorhus/file-type and hex skills

   Yesterday my pull request for [11]sindresorhus/file-type was
   [12]accepted.  Hoorah! üòÉ

   [13]Screen Shot 2015-11-08 at 5.34.24 PM

   I‚Äôve decided to spend more time working with OSS developers for fun and
   profit. [14]Sindre Sorhus is hugely popular as a developer, in large
   part for the the exceedingly numerous, high-quality packages he‚Äôs
   submitted to [15]NPM.org and on [16]Github.  All in all, he‚Äôs a
   stand-up guy who deserves the success and recognition for all the hard
   work he‚Äôs put in for the JS community.

   Lo-and-behold, a few days ago the call for contributors was made!


     Here are the open issues on my repos in case anyone wants to help
     out by triaging/commenting/fixing/etc ‚ô• [17]https://t.co/R7DkIvjTBV

     ‚Äî Sindre Sorhus (@sindresorhus) [18]November 3, 2015

   I landed on [19]this issue made for
   expanding [20]sindresorhus/file-type with more compressed file types.
   [21]file-type is a Node.js module made for apps needing to identify
   files by their actual binary signature, similar
   to [22]threatstack/libmagic for the C language.  It has  a
   straightforward and concise structure consisting of a series of if
   statements and a byte-by-byte examination of the current file stream,
   typically only a few bytes. Here‚Äôs an example of how it checks a file
   if it‚Äôs a GIF:
if (buf[0] === 0x47 && buf[1] === 0x49 && buf[2] === 0x46) {
    return {
        ext: 'gif',
        mime: 'image/gif'
    };
}

Digging in‚Ä¶

   [23]I‚Äôve messed with hex dumps and debugging binary files before, and
   this simply involved cross-referencing the first few bytes of a file
   with already-known signatures.

   The first  task was to get the [24]lists of file types [25]needing
   signatures and grabbing the relevant data from sources around the net,
   mostly from the [26]File Signatures Table, compiled by Gary Kessler.

   I created a quick spreadsheet to keep things in order, too.
   [27]Screen Shot 2015-11-08 at 5.32.45 PM

   To help out on quick inspections, I created tiny utility to help at
   first, calling it fsig
#!/bin/bash

clear
xxd $1 | head

   And for inspecting temporary directories of common file types, I used
   this bash one-liner:
clear; for n in *; do echo $n ; xxd $n | head ; done


   For extracting signatures cleanly, I ran into [28]HexFiend for OSX.
   It‚Äôs highly recommended since it displays where the cursor is by byte
   and allows for clean copy-paste.
   [29]Screen Shot 2015-11-08 at 4.10.52 PM

Making it work

   A couple of problems I ran into was the issue of files with similar
   signatures.  For example, deb files are nearly identical to files made
   with the compress utility.  That means that care was needed when
   ordering the logic.
   [30]ordering logic Care was needed in ordering the logic for comparing
   file signatures

   To make converting the signature hex into code simple and quick, I used
   Vim‚Äôs handy macro recording mode.
   [31]macro

   I love Vim macros. Check out how to use them with [32]Vim 101: A Gentle
   Introduction to Macros.

All set

   Check out[33]sindresorhus/file-type, and for that matter, maybe you can
   help with OSS by working on [34]open issues from sindresorhus‚Äô other
   projects üòÅ

   Let me know what you think on twitter  [35]@lintuxvi!
   Posted on [36]November 9, 2015November 9, 2015Categories
   [37]Uncategorized

[38]In Progress: MEAN Stack patterns 1.0

   [39]11357731_367461846787628_1003011773_n

   I‚Äôm putting together a course, complete with videos, slides, example
   code, etc, but for my multitudinous (üòÖ) readers I‚Äôd love to, you know,
   show what I‚Äôve got so far‚Ä¶
   [40]tiopw Note: not me, just a Good Guy Greg, dude..


   [41]Check out the draft materials here.  Draft text is under
   [42]drafts/  and accompanying code for lessons is under
   [43]lesson-code/. Tell me what you think on twitter [44]@lintuxvi!
   Posted on [45]November 2, 2015November 2, 2015Categories
   [46]UncategorizedTags [47]work

[48]Hackathon: NBCU2015 and Telemira

   For the [49]2015 NBCU hackathon in Orlando, I entered, along with a
   friend, into the Telemundo category.  We whipped up the design and the
   code in a night of a rough prototype app that outlined a novel way to
   generated viewer interaction during broadcasts.  Enter [50]TeleMira:
   TeleMira app Introducing: TeleMira!

   [51]Check out the code on github!

   Built with [52]Framework 7 for the easy iOS look-and-feel, it outlined
   a future where viewers can watch broadcasts, then during commercial
   breaks and credits receive time-sensitive B-reels, bloopers, and hidden
   content.  Clips viewed during this time could be saved and traded with
   friends, since only a limited amount of clips could be viewed during
   the clip‚Äôs countdown period.

   How about some gifs to outline what‚Äôs going on?
   1.  Viewers receive clips during commercial breaks or credits
   [53]growl
   2. You can watch clips by clicking on them
   [54]click
   3. Clips you‚Äôve watched are added to your archive of watched videos
   [55]archivo
   4.  Be careful though, these time-sensitive videos will disappear if
   they‚Äôre not watched in time!
   [56]close
   5.  If you miss a clip, you can check to see if your friends has it
   [57]amigovideos

   If you haven‚Äôt yet, try out [58]TeleMira, and tell me what you think on
   twitter [59]@lintuxvi.  Also, [60]check out the code on github!
   Posted on [61]November 2, 2015November 2, 2015Categories
   [62]UncategorizedTags [63]work

[64]Update: Manydoge.com back up!

   [65]manydoge.com Classic doge stylings!

   Created back in 2013, [66]manydoge.com is back up!  After a hiatus the
   last few months, it‚Äôs rehosted and ready to create and post your
   favorite classic doge styles on imgur, or download as you like.  Let me
   know what you think on twitter @lintuxvi.  [67]Check out the source on
   github and fork away!
   Posted on [68]November 2, 2015November 2, 2015Categories
   [69]UncategorizedTags [70]work

[71]Recent work: BDD with AngularJS and Protractor

   Recently, I spent a few days getting to know the testing ecosystem
   around AngularJS, specifically related to Unit Testing and End-to-End
   testing.  [72]Jasmine (unit-testing) and [73]Protractor (end-to-end)
   are the two prescribed frameworks for those.

   To get a grasp of using these tools, I built a mock application:
   [74]Mailist.  Mailist‚Äôs story is that it helps send many emails easier,
   using a template and a [75]CSV with recipient data.

   With that in mind, I looked around for some resources online as to how
   BDD changes the development process.  The first article to peak my
   interest was [76]Functional testing with cucumber and protractor.
   Being that BDD differs from TDD in that a feature/behavior is being
   tested, rather than the functionality of a module/unit, bridging the
   conceptual gap was a little shaky.  In the middle of the [77]Functional
   testing‚Ä¶, this graphic came up that helped to elucidate the process:
   [78]outside-in-development Figure 1: the BDD cycle

   Take a look at the graphic: you can see that unit-testing still exists
   within the context of the BDD, but now it‚Äôs involved within the
   development of the system at large.  Red-Green-Refactor is still there,
   but within the greater BDD loop of focusing on the scenario.

Testing: BDD  üëâ  Scenarios

   [79]Whats in a Story is a great article that focuses on the scenario
   approach to writing features in BDD.  Boiled down, when we write out
   what the features will be:

1. The scenario title should say what‚Äôs different

     You should be able to line up the scenarios side by side, and
     describe how they differ using only the title.

2. The scenario should be described in terms of Givens, Events and Outcomes

     ‚Ä¶adopt this vocabulary of ‚Äúgiven/when/then‚Äù‚Ä¶

   To build out the scenarios in [80]Mailist, these rules were used.
   Here‚Äôs an example scenario:
Scenario: A user loads a list and generates a queue
Given there are no emails
 And there is no template
 And there is no cached data
When the user loads a csv of data
Then the queue list should be populated
 And there should be relevant field headers

   Figure 2: example scenario

   Note: this closely resembles the [81]Gherkin syntax, which I‚Äôd like to
   use with the [82]Cucumber BDD framework in the future, however I‚Äôm
   keeping this exploration simple.

Testing: Protractor  üëâ  End-to-End

   Looking at the chart in Figure 1, since the features we build involve
   multiple parts of the system, testing at the [83]integration level
   makes sense.  The Angular team has done a great job providing a tool
   just for that: [84]Protractor.  It‚Äôs compatible with the Jasmine
   syntax, and uses a convenient element selection syntax for performing
   actions on target elements.  For example:
var input = element(by.css('input'));
input.sendKeys('123');
expect(input.getAttribute('value')).toBe('Foo123');

   Check out [85]the docs for more info.

Testing: Jasmine  üëâ Unit-Testing

   Here we unit test with the popular [86]Jasmine test framework.  For
   each of the scenarios, now a series of internal modules become clear.
   This was the aha moment.  For each scenario, the internal requirements
   become clear.  And just like the chart in Figure 1, I‚Äôm back to the
   Red-Green-Refactor cycle, defining and testing module behavior in the
   typical TDD fashion.

   The one thing that sticks out here with Angular is testing directives.
    There are a couple of methods I‚Äôve seen online recommended: using E2E
   for testing directives, or using the [87]internal angular directive
   compilation.  Both are straightforward, however I was having trouble
   automating the file input through the directive compilation method
   because of browser security policies.  I‚Äôd rather not have to script
   launching browsers with special access policy flags, so I left those
   tests to Protractor.

Conclusion

   So, in short, BDD with Angular is straightforward using Protractor and
   Jasmine for E2E and unit-testing.  By sticking to the chart in
   [88]Figure 1, building out scenarios, and sticking with
   givens/events/outcomes to outline our scenarios, we have a clear idea
   of how our app evolves.

Links

   Jump over to Github and [89]browse the code for Mailist.  Then take a
   look at these links for the tools mentioned:
     * [90]Jasmine
     * [91]Protractor

   For my favorite link on Angular testing, check out Year of
   Moo‚Äôs [92]Full-Spectrum Testing with AngularJS and Karma.  It‚Äôs
   centered around Mocha, Chai, and Karma as a testing framework, but the
   concepts for testing each part of an Angular app is broken down here.

   Let me know what you think on Twitter [93]@lintuxvi
   Posted on [94]November 2, 2015November 2, 2015Categories
   [95]UncategorizedTags [96]work

[97]Recent Work ‚Äì Header Grab Bag

   [98]Screen Shot 2015-09-10 at 8.08.40 PM

   Recently I put out a collection of page headers, all open sourced under
   the MIT license.  You can create your own styles by modifying a few
   variables in the included LESS source, or use one of the 11 included
   styles.

   Take a look at [99]http://devbrainhack.co/projects/headergrabbag/

   Tell me what you think on twitter [100]@lintuxvi!

   ‚úåÔ∏è‚ù§Ô∏èüçª
   Posted on [101]October 7, 2015November 2, 2015Categories
   [102]UncategorizedTags [103]work

[104]Baking partnerships

   I‚Äòve been wanting to write something for myself for a while now, and
   being a tech blog, I should inaugurate this one with an instance of
   writing blessed by tech canon: fail often and fail quick.
   Figuratively, you can see it like playing a poker hand or snipping a
   wire defusing a bomb.  As far as consequences go, they can range from
   emotionally draining to traumatizing (in a sort of gradient
   between n‚Ä¶n+1).  But if we‚Äôre torturing analogies here, let‚Äôs talk
   about baking and partnerships.

   I‚Äôm mostly a coder, who dabbles in entrepreneurship, but since my
   passion lies in personal projects and friendships, I‚Äôve run into a few
   situations where they come together.  Some of these Frankensteins have
   turned out well, and others not so much, but the biggest factor in
   determining that success has been in the partnership built.

Picking a partner: values and experience aren‚Äôt all sugar and spice

   Picking a partner is a kind of baking.  You get the ingredients
   together, you lay them out in front of you, then crack, crack,
   crack, mix, mix, mix, whisk them all in a bowl and stick it in an oven.
    Your project, the business, is like that oven.

   Cranking the oven up reveals the wonderful possibilities, and without
   it your cake is just a pan of half-rendered goop, in a state of ready
   decomposition.  By taking the elements and putting them to the test,
   all the constituent elements behave together as well as the mixed
   ingredients were picked and placed.

   [105]herbs-and-spices

   Except, sometimes, we as bakers are blind.  We as bakers mislabel our
   ingredients, or ignore the labels altogether.  What was salt is
   actually sugar and what is sugar is baking soda, and what is baking
   soda is Ajax scrubbing powder with bleach.  Yech, and call your local
   poison-control center immediately.

   People are the same.  You and I, we hold a few flavors for public
   consumption.  How we behave, the attitudes we project, our go-to
   methods for conflict resolution and problem-solving: we keep these as a
   sort of feature-set called upon as long as there‚Äôs clean, un-pressured
   energy to utilize before our fight-or-flight centers kick in.

   Take multiple people, add a potentially big payout, and now we‚Äôve got
   some heat.  You‚Äôre going to run into situations when what you thought
   was a Beef-Wellington ends up being just a starter-log wrapped in
   yolk-glazed paper-mache.  Volatile, flammable.

   Some have ingredients rated for high temperatures, while others go up
   in flames pretty quickly.

   So, big note-to-self: put the time in beforehand.
    1. ‚ÄòDate‚Äô all potential partners, and be aware of the typical warning
       signs (ex. mismatched values, gut feelings, personal history)
    2. Make sure the vision is there.  No vision is like a train off the
       rails: crazy.
    3. Make sure there‚Äôs an end-game. Get confident about it, learn the
       possibilities and contingencies.
    4. Have an understanding of how each partner resolves uncertainty and
       conflict.  One person making decisions out of fear in a partnership
       is a symptom that real communication has broken down and planning
       is out the window.  That‚Äôs a recipe for burnout and disaster.
    5. Make sure negotiating financials isn‚Äôt akin to pulling teeth.
       Someone who continually tries to negotiate you at every step is a
       sign that you‚Äôre not going to be working together long.

   If you‚Äôre going to be spending irretrievable time in your life with
   others, with the intentional goal of creating something to benefit
   everyone involved, make sure you all balance each other‚Äôs strengths and
   weaknesses in a lucid and explicit way, even at the worst of times.
   And that‚Äôs not easy to achieve.  But putting in the legwork beforehand
   will be worth it in the end.
   Posted on [106]September 2, 2015November 30, 2015Categories
   [107]businessTags [108]business
   [109]Proudly powered by WordPress

References

   Visible links
   1. http://devbrainhack.co/index.php/feed/
   2. http://devbrainhack.co/index.php/comments/feed/
   3. file:///home/mgomez/CS432/A3/source50.txt#content
   4. http://devbrainhack.co/
   5. http://devbrainhack.co/index.php/2015/11/02/in-progress-mean-stack-patterns-1-0/
   6. http://devbrainhack.co/index.php/2015/11/02/hackathon-nbcu2015-and-telemira/
   7. http://devbrainhack.co/index.php/2015/11/02/update-manydoge-com-back-up/
   8. http://devbrainhack.co/index.php/2015/11/02/recent-work-bdd-with-angularjs-and-protractor/
   9. http://devbrainhack.co/index.php/2015/10/07/recent-work-header-grab-bag/
  10. http://devbrainhack.co/index.php/2015/11/09/recent-work-file-signatures-with-sindresorhusfile-type/
  11. https://github.com/sindresorhus/file-type
  12. https://github.com/sindresorhus/file-type/commit/17911e2de88050ce775fbf952ad2a84bd623b6dc
  13. http://devbrainhack.co/wp-content/uploads/2015/11/Screen-Shot-2015-11-08-at-5.34.24-PM.png
  14. http://twitter.com/sindresorhus
  15. https://www.npmjs.com/~sindresorhus
  16. http://github.com/sindresorhus
  17. https://t.co/R7DkIvjTBV
  18. https://twitter.com/sindresorhus/status/661573963252932608
  19. https://github.com/sindresorhus/file-type/issues/22
  20. https://github.com/sindresorhus/file-type
  21. https://github.com/sindresorhus/file-type
  22. https://github.com/threatstack/libmagic
  23. http://www.crackmes.de/
  24. https://github.com/sindresorhus/compressed-extensions/blob/master/compressed-extensions.json
  25. https://github.com/sindresorhus/archive-extensions/blob/master/archive-extensions.json
  26. http://www.garykessler.net/library/file_sigs.html
  27. http://devbrainhack.co/wp-content/uploads/2015/11/Screen-Shot-2015-11-08-at-5.32.45-PM.png
  28. http://ridiculousfish.com/hexfiend/
  29. http://devbrainhack.co/wp-content/uploads/2015/11/Screen-Shot-2015-11-08-at-4.10.52-PM.png
  30. http://devbrainhack.co/wp-content/uploads/2015/11/Screen-Shot-2015-11-08-at-6.07.39-PM.png
  31. http://devbrainhack.co/wp-content/uploads/2015/11/macro.gif
  32. http://usevim.com/2012/08/10/macros/
  33. https://github.com/sindresorhus/file-type
  34. https://t.co/R7DkIvjTBV
  35. http://twitter.com/lintuxvi
  36. http://devbrainhack.co/index.php/2015/11/09/recent-work-file-signatures-with-sindresorhusfile-type/
  37. http://devbrainhack.co/index.php/category/uncategorized/
  38. http://devbrainhack.co/index.php/2015/11/02/in-progress-mean-stack-patterns-1-0/
  39. http://devbrainhack.co/wp-content/uploads/2015/11/11357731_367461846787628_1003011773_n.jpg
  40. http://devbrainhack.co/projects/udemy-mean/
  41. http://devbrainhack.co/projects/udemy-mean/
  42. http://devbrainhack.co/projects/udemy-mean/drafts/
  43. http://devbrainhack.co/projects/udemy-mean/lesson-code/
  44. http://twitter.com/lintuxvi
  45. http://devbrainhack.co/index.php/2015/11/02/in-progress-mean-stack-patterns-1-0/
  46. http://devbrainhack.co/index.php/category/uncategorized/
  47. http://devbrainhack.co/index.php/tag/work/
  48. http://devbrainhack.co/index.php/2015/11/02/hackathon-nbcu2015-and-telemira/
  49. http://nbcuhackathon.com/en/orlando-2015/
  50. file:///home/mgomez/CS432/A3/source50.txt
  51. https://github.com/alexanderlperez/telemira
  52. http://www.idangero.us/framework7/
  53. file:///home/mgomez/CS432/A3/source50.txt
  54. file:///home/mgomez/CS432/A3/source50.txt
  55. file:///home/mgomez/CS432/A3/source50.txt
  56. file:///home/mgomez/CS432/A3/source50.txt
  57. file:///home/mgomez/CS432/A3/source50.txt
  58. file:///home/mgomez/CS432/A3/source50.txt
  59. http://twitter.com/lintuxvi
  60. https://github.com/alexanderlperez/telemira
  61. http://devbrainhack.co/index.php/2015/11/02/hackathon-nbcu2015-and-telemira/
  62. http://devbrainhack.co/index.php/category/uncategorized/
  63. http://devbrainhack.co/index.php/tag/work/
  64. http://devbrainhack.co/index.php/2015/11/02/update-manydoge-com-back-up/
  65. http://manydoge.com/
  66. http://manydoge.com/
  67. https://github.com/alexanderlperez/ManyDoge
  68. http://devbrainhack.co/index.php/2015/11/02/update-manydoge-com-back-up/
  69. http://devbrainhack.co/index.php/category/uncategorized/
  70. http://devbrainhack.co/index.php/tag/work/
  71. http://devbrainhack.co/index.php/2015/11/02/recent-work-bdd-with-angularjs-and-protractor/
  72. https://github.com/jasmine/jasmine
  73. http://www.protractortest.org/
  74. https://github.com/alexanderlperez/mailist
  75. https://en.wikipedia.org/wiki/Comma-separated_values
  76. http://nicholasjackson.github.io/agile/bdd/angular/protractor/cucumber/protractor-cucumber/
  77. http://nicholasjackson.github.io/agile/bdd/angular/protractor/cucumber/protractor-cucumber/
  78. http://devbrainhack.co/wp-content/uploads/2015/10/outside-in-development.png
  79. http://dannorth.net/whats-in-a-story/
  80. https://github.com/alexanderlperez/mailist
  81. https://github.com/cucumber/cucumber/wiki/Gherkin
  82. https://github.com/cucumber/cucumber-js
  83. https://en.wikipedia.org/wiki/Integration_testing
  84. http://www.protractortest.org/
  85. http://www.protractortest.org/#/api?view=ElementFinder
  86. http://www.protractortest.org/
  87. https://docs.angularjs.org/guide/unit-testing#testing-directives
  88. file:///home/mgomez/CS432/A3/source50.txt#figure-1
  89. https://github.com/alexanderlperez/mailist
  90. https://github.com/jasmine/jasmine
  91. http://www.protractortest.org/
  92. http://www.yearofmoo.com/2013/01/full-spectrum-testing-with-angularjs-and-karma.html
  93. http://www.twitter.com/lintuxvi
  94. http://devbrainhack.co/index.php/2015/11/02/recent-work-bdd-with-angularjs-and-protractor/
  95. http://devbrainhack.co/index.php/category/uncategorized/
  96. http://devbrainhack.co/index.php/tag/work/
  97. http://devbrainhack.co/index.php/2015/10/07/recent-work-header-grab-bag/
  98. http://devbrainhack.co/wp-content/uploads/2015/09/Screen-Shot-2015-09-10-at-8.08.40-PM-e1441930027258.png
  99. http://devbrainhack.co/projects/headergrabbag/
 100. http://twitter.com/lintuxvi
 101. http://devbrainhack.co/index.php/2015/10/07/recent-work-header-grab-bag/
 102. http://devbrainhack.co/index.php/category/uncategorized/
 103. http://devbrainhack.co/index.php/tag/work/
 104. http://devbrainhack.co/index.php/2015/09/02/baking-partnerships/
 105. http://devbrainhack.co/wp-content/uploads/2015/09/herbs-and-spices.jpg
 106. http://devbrainhack.co/index.php/2015/09/02/baking-partnerships/
 107. http://devbrainhack.co/index.php/category/business/
 108. http://devbrainhack.co/index.php/tag/business/
 109. https://wordpress.org/

   Hidden links:
 111. http://twitter.com/lintuxvi
 112. http://github.com/alexanderlperez
 113. http://stackoverflow.com/users/1817379/lintuxvi
