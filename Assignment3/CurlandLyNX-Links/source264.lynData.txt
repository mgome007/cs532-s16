   #[1]So much to do, so little time RSS Feed

[2]So much to do, so little time

   Trying to squeeze sense out of chemical data

[3]vSDC, Rank Products and DUD-E

   [4]with 2 comments

   This post is a follow-up to my [5]previous discussion on a paper by
   [6]Chaput et al. The gist of that paper was that in a virtual screening
   scenario where a small number of hits are to be selected for followup,
   one could use an ensemble of docking methods, identify compounds whose
   scores were beyond 2SD of the mean for each method and take the
   intersection. My [7]post suggested that a non-parametric approach
   ([8]rank products, RP) performed similarly to the parametric approach
   of [9]Chaput et al on the two targets they screened.

   The authors also performed a benchmark comparison of their consensus
   method (vSDC) versus the individual docking methods for 102 [10]DUD-E
   targets. I was able to obtain the individual docking scores (Glide,
   Surflex, FlexX and GOLD) for each of the targets, with the aim of
   applying the rank product method described previously.

   In short, I reproduced [11]Figure 6A (excluding the curve for vSDC). In
   [12]th0 this figure, \(n_{test}\) is the number of compounds selected
   (from the ranked list, either by individual docking scores or by the
   rank product) and \(T_{h>0}\) is the percentage of targets for which
   the \(n_{test}\) selected compounds included one or more actives. Code
   is available [13]here, but you’ll need to get in touch with the authors
   for the DUD-E docking scores.

   As shown alongside, the RP method (as expected) outperforms the
   individual docking methods. And visual comparison with the [14]original
   figure suggests that it also outperforms vSDC, especially at lower
   values of \(n_{test}\). While I wouldn’t regard the better performance
   of RP compared to vSDC as a huge jump, the absence of a threshold
   certainly works in its favor.

   One could certainly explore ranking approaches in more depth. As
   suggested by [15]Abhik Seal, Borda or Condorcet methods could be
   examined (though the small number of docking methods, a.k.a., voter,
   could be problematic).

   UPDATE: After a clarification from [16]Liliane Mouawad it turns out
   there was a mistake in the ranking of the Surflex docking scores.
   Correcting that bug fixes my reproduction of [17]Figure 6A so that the
   curves for individual docking methods match the original. But more
   interestingly, the performance of RP is now clearly better than every
   individual method and the vSDC method as well, at all values of
   \(n_{test}\)

   Written by Rajarshi Guha

   February 13th, 2016 at 7:25 pm

   Posted in [18]Literature,[19]cheminformatics

   Tagged with [20]virtual screening, [21]docking, [22]ensemble

[23]Hit Selection When You’re Strapped for Cash

   [24]with one comment

   I came across a paper from [25]Chaput et al that describes an approach
   to hit selection from a virtual screen (using docking), when follow-up
   resources are limited (a common scenario in many academic labs). Their
   approach is based on using multiple docking programs. As they (and
   [26]others) have pointed out, there is a wide divergence between the
   rankings of compounds generated using different programs. Hence the
   motivation for a consensus approach, based on the estimating the
   standard deviation (SD) of scores generated by a given program and
   computing the intersection of compounds whose scores are greater than 2
   standard deviations from the mean, in each program. Based on this rule,
   they selected relatively few compounds – [27]just 14 to 22, depending
   on the target and confirmed at least one of them for each target. This
   represents less than 0.5% of their screening deck.

   However, their method is parametric – you need to select a SD
   threshold. I was interested in seeing whether a non-parametric, ranking
   based approach would allow one to retrieve a subset that included the
   actives identified by the authors. The method is essentially the
   [28]rank product method applied to the docking scores. That is, the
   compounds are ranked based on their docking scores and the “ensemble
   rank” for a compound is the product of its ranks according to each of
   the four programs. In contrast to the original definition, I used a sum
   log rank to avoid overflow issues. So the ensemble rank for the
   \(i\)’th compound is given by

   \(R_i = \sum_{j=1}^{4} \log r_{ij}\)

   where \(r_{ij}\) is the rank of the \(i\)’th compound in the \(j\)’th
   docking program. Compounds are then selected based on their ensemble
   rank. Obviously this doesn’t give you a selection per se. Instead, this
   allows you to select as many compounds as you want or need.
   Importantly, it allows you to introduce external factors (cost,
   synthetic feasibility, ADME properties, etc.) as additional rankings
   that can be included in the ensemble rank.

   Using the [29]docking scores for Calcineurin and Histone Binding
   Protein (Hbp) provided by [30]Liliane Mouawad (though all the data
   really should’ve been included in the paper) I applied this method
   using the code below
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
     library(stringr)
     d <-
     read.table('http://cmib.curie.fr/sites/u759/files/document/score_vs_cn.
     txt',
                     header=TRUE, comment='')
     names(d) <- c('molid', 'Surflex', 'Glide', 'Flexx', 'GOLD')
     d$GOLD <- -1*d$GOLD ## Since higher scores are better
     ranks <- apply(d[,-1], 2, rank)
     lranks <- rowSums(log(ranks))
     tmp <- data.frame(molid=d[,1], ranks, lrp=rp)
     tmp <- tmp[order(tmp$lrp),]
     which(str_detect(tmp$molid, 'ACTIVE'))

   and identified the single active for Hbp at ensemble rank 8 and the
   three actives for Calcineurin at ranks 3, 5 and 25. Of course, if you
   were selecting only the top 3 you would’ve missed the Calcineurin hit
   and only have gotten 1/3 of the HBP hits. However, as the authors
   nicely showed, manual inspection of the binding poses is crucial to
   making an informed selection. The ranking is just a starting point.

   Update: Docking scores for Calcineurin and Hbp are now [31]available

   Written by Rajarshi Guha

   February 5th, 2016 at 1:36 am

   Posted in [32]Literature,[33]research,[34]cheminformatics

   Tagged with [35]docking, [36]data science, [37]vs, [38]virtual screen,
   [39]ensemble

[40]Applications Invited for CSA Trust Grant for 2016

   [41]without comments

   The Chemical Structure Association (CSA) Trust is an internationally
   recognized organization established to promote the critical importance
   of chemical information to advances in chemical research. In support of
   its charter, the Trust has created a unique Grant Program and is now
   inviting the submission of grant applications for 2016.

   Purpose of the Grants:

   The Grant Program has been created to provide funding for the career
   development of young researchers who have demonstrated excellence in
   their education, research or development activities that are related to
   the systems and methods used to store, process and retrieve information
   about chemical structures, reactions and compounds. One or more Grants
   will be awarded annually up to a total combined maximum of ten thousand
   U.S. dollars ($10,000). Grantees have the option of payments being made
   in U.S. dollars or in British Pounds equivalent to the U.S. dollar
   amount. Grants are awarded for specific purposes, and within one year
   each grantee is required to submit a brief written report detailing how
   the grant funds were allocated. Grantees are also requested to
   recognize the support of the Trust in any paper or presentation that is
   given as a result of that support.

   Who is Eligible?

   Applicant(s), age 35 or younger, who have demonstrated excellence in
   their chemical information related research and who are developing
   careers that have the potential to have a positive impact on the
   utility of chemical information relevant to chemical structures,
   reactions and compounds, are invited to submit applications. While the
   primary focus of the Grant Program is the career development of young
   researchers, additional bursaries may be made available at the
   discretion of the Trust. All requests must follow the application
   procedures noted below and will be weighed against the same criteria.

   Which Activities are Eligible?

   Grants may be awarded to acquire the experience and education necessary
   to support research activities; e.g. for travel to collaborate with
   research groups, to attend a conference relevant to one’s area of
   research (including the presentation of an already-accepted research
   paper), to gain access to special computational facilities, or to
   acquire unique research techniques in support of one’s research.

   Application Requirements:

   Applications must include the following documentation:
    1. A letter that details the work upon which the Grant application is
       to be evaluated as well as details on research recently completed
       by the applicant;
    2. The amount of Grant funds being requested and the details regarding
       the purpose for which the Grant will be used (e.g. cost of
       equipment, travel expenses if the request is for financial support
       of meeting attendance, etc.). The relevance of the above-stated
       purpose to the Trust’s objectives and the clarity of this statement
       are essential in the evaluation of the application);
    3. A brief biographical sketch, including a statement of academic
       qualifications;
    4. Two reference letters in support of the application.  Additional
       materials may be supplied at the discretion of the applicant only
       if relevant to the application and if such materials provide
       information not already included in items 1-4.   A copy of the
       completed application document must be supplied for distribution to
       the Grants Committee and can be submitted via regular mail or
       e-mail to the Committee Chair (see contact information below).

   Deadline for Applications:

   Application deadline for the 2016 Grant is March 25, 2016. Successful
   applicants will be notified no later than May 2, 2016.

   Address for Submission of Applications:

   The application documentation should be forwarded via post or email to:
   Bonnie Lawlor, CSA Trust Grant Committee Chair, 276 Upper Gulph Road,
   Radnor, PA 19087, USA. If you wish to enter your application by e-mail,
   please contact Bonnie Lawlor at [42]chescot@aol.com prior to submission
   so that she can contact you if the e-mail does not arrive.

   Written by Rajarshi Guha

   January 26th, 2016 at 7:36 pm

   Posted in [43]Uncategorized

   Tagged with [44]award, [45]csa

[46]Cryptography & Chemical Structure Search

   [47]without comments

   Encryption of chemical information has not been a very common topic in
   cheminformatics. There was an ACS [48]symposium in 2005 ([49]summary)
   that had a number of presentations on the topic of “safe exchange” of
   chemical information – i.e., exchanging information on chemical
   structures without sharing the structures themselves. The common thread
   running through many presentations was to identify representations
   (a.k.a, descriptors) that can be used for useful computation (e.g.,
   regression or classification models or similarity searches) but do not
   allow one to (easily) regenerate the structure. Examples include the
   use of [50]PASS descriptors and various [51]topological indices.
   Non-descriptor based approaches included, [52]surrogate data (that is
   structures of related molecules with similar properties) and most
   recently, [53]scaffold networks. Also, [54]Masek et al, JCIM, 2008
   described a procedure to assess the risk of revealing structure
   information given a set of descriptors.

   As indicated by [55]Tetko et al, descriptor based approaches are liable
   to dictionary based attacks. Theoretically if one fully enumerates all
   possible molecules and computes the descriptors it would be trivial to
   obtain the structure of an obfuscated molecule. While this is not
   currently practical, [56]Masek et al have already shown that an
   evolutionary algorithm can reconstruct the exact (or closely related)
   structure from BCUT descriptors in a reasonable time frame and [57]Wong
   & Burkowski, JCheminf, 2009 described a kernel approach to generating
   structures from a set of descriptors (though they were considering the
   [58]inverse QSAR problem rather than chemical privacy). Uptil now I
   wasn’t aware of approaches that were truly one way – impossible
   to regenerate the structure from the descriptors, yet also perform
   useful computations.

   Which brings me to an interesting paper by [59]Shimuzu et al which
   describes a cryptographic approach to chemical structure search, based
   on [60]homomorphic encryption. A homomorphic encryption scheme allows
   one to perform computations on the encrypted (usually based on [61]PKI)
   input leading to an encrypted result, which when decrypted gives the
   same result as if one had performed the computation on the clear (i.e.,
   unecnrypted) input. Now, a “computation” can involve a variety of
   operations – addition, multiplication etc. Till recently, most
   homomorphic schemes were restricted to one or a few operations (and so
   are termed partially homomorphic). It was only in 2009 that a practical
   proposal for a fully homomorphic (i.e., supporting arbitrary
   computations) cryptosystem was [62]described. See this excellent
   [63]blog post for more details on homomorphic cryptosystems.

   The work by [64]Shimuzu et al addresses the specific case of a user
   trying to identify molecules from a database that are similar to a
   query structure. They consider a simplified situation where the user is
   only interested in the count of molecules above a similarity threshold.
   Two constraints are:
    1. Ensure that the database does not know the actual query structure
    2. The user should not gain information about the database contents
       (except for number of similar molecules)

   Their scheme is based on a additive homomorphic system (i.e., the only
   operation supported on the encrypted data is addition) and employs
   binary fingerprints and the [65]Tversky similarity metric (which can be
   reduced to Tanimoto if required). I note that they used 166-bit
   [66]MACCS keys. Since it’s small and each bit position is known it
   seems that some information could leak out of the encrypted fingerprint
   or be subject to a dictionary attack. I’d have expected that using a
   larger hashed fingerprint would have helped improve the security.
   (Though I suspect that the encryption of the query fingerprint
   alleviates this issue). Another interesting feature, designed to
   prevent information about the database leaking back to the user is the
   use of “dummies” – random, encrypted (by the users public key) integers
   that are mixed with the true (encrypted) query result. Their design
   allows the user to determine the sign of the query result (which
   indicates whether the database molecule is similar to the query, above
   the specified threshold), but does not let them get the actual
   similarity score. They show that as the number of dummies is increased,
   the chances of database information leaking out tends towards zero.

   Of course, one could argue that the limited usage of proprietary
   chemical information (in terms of people who have it and people who can
   make use of it) means that the efforts put in to obfuscation,
   cryptography etc. could simply be replaced by legal contracts.
   Certainly, a simple way to address the scenario discussed here (and
   noted by the authors) is to download the remote database locally. of
   course this is not feasible if the remote database is meant to stay
   private (e.g., a competitors structure database).

   But nonetheless, methods that rigorously guarantee privacy of chemical
   information are interesting from an algorithmic standpoint. Even though
   [67]Shimuzu et al described a very simplistic situation (though the
   more realistic scenario where the similar database molecules are
   returned would obviously negate constraint 2 above), it looks like a
   step forward in terms of applying formal cryptanalysis to chemical
   problems and supporting truly safe exchange of chemical information.

   Written by Rajarshi Guha

   January 5th, 2016 at 3:17 am

   Posted in [68]Literature,[69]research,[70]software,[71]cheminformatics

   Tagged with [72]database, [73]fingerprint, [74]maccs, [75]search,
   [76]chembl, [77]cryptography, [78]encryption, [79]secure

[80]Elemental Words

   [81]without comments

   Last night, my colleague [82]Matthew Hall tweeted

     Is there a app/site dictionary of all words possible with element
     symbols? [83]#RealTimeChem

     — Matthew Hall (@cispt2) [84]January 3, 2016

   With the recent [85]news of the 7th row of the periodic table being
   filled I figured this would be a good time to follow up on Matthews
   request and identify such elemental words.

   There are a lot of word lists available online. Being an ex-Scrabble
   addict, the [86]OSPD came to mind. So using the [87]SOWPODS word list
   of 267,751 words I put together a quick Python program to identify
   words that can be constructed from 1- and 2-letter element symbols.
   (The newly confirmed elements – Uut, Uuo, Uup & Uus – don’t occur in
   any English words). Importantly, 2-letter elements should exist in a
   contiguous fashion. This means that a word like ABRI ([88]a shelter) is
   not an elemental word since it contains Boron & Iodine, but the A and R
   are not contiguous and so wouldn’t correpsond to Argon. (It could also
   contain Bromine and Iodine but then the remaining A doesn’t match any
   element).

   The code below takes [DEL: 4.1s :DEL] 2.0s to process SOWPODS and
   identifies [89][DEL: 19,698 :DEL] 40,989 “elemental words”. Thanks to
   [90]Noel O’Boyle for [91]suggesting the use of a regex and [92]directly
   extracting matches (so avoiding looping over individual words) and
   [93]Rich Lewis for generating output in [94]element-case.
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
     from __future__ import print_function
     import sys, re
     if len(sys.argv) != 2:
         print('Usage: code.py WORD_LIST_FILE_NAME')
         sys.exit(0)

     wordlist = sys.argv[1]
     words = open(wordlist, 'r').read()
     print('Dictionary has %d words' % (len(re.findall('\n', words))))
     with open('elements.txt', 'r') as eles:
         elems = {e.lower(): e for e in eles.read().split() if e != ''}
     valid_w = re.findall('(^(?:'+'|'.join(elems.keys())+')+?$)', words,
     re.I|re.M)
     print('Found %d elemental words' % (len(valid_w)))
     pattern = re.compile('|'.join(elems.keys()))
     elementify = lambda s: pattern.sub(lambda x: elems[x.group()], s)
     with open('elemental-%s' % (wordlist), 'w') as o:
         for w in valid_w:
             o.write(elementify(w)+"\n")

   Just for fun I also extracted all the titles from [95]Wiktionary,
   irrespective of language. That gives me a list of 2,726,436 words to
   examine. After [DEL: 35s :DEL] 20s I got [DEL: 148,211 :DEL] 370,724
   “elemental words”.

   You can find the code along with the element symbol list and input
   files in this [96]repository

   Update: Thanks to [97]Noels’ [98]suggestion of a regex, I realized my
   initial implementation had a bug and did not identify all elemental
   words in a dictionary. The updated code now does, and does it 50%
   faster

   Update:Thanks to [99]Rich Lewis for providing a patch to output
   matching words in element-case (e.g., AcOUSTiCAl)

   Written by Rajarshi Guha

   January 3rd, 2016 at 3:07 pm

   Posted in [100]software

   Tagged with [101]scrabble, [102]periodic table, [103]elements,
   [104]dictionary
   [105]« Older Entries
   Search for: ____________________ Search

Pages

     * [106]About
     * [107]Publications

Blogroll

     * [108]Asads Blog
     * [109]chem-bla-ics
     * [110]In the Pipeline
     * [111]Noel O'Blog
     * [112]Signals
     * [113]Tripod

Archives

     * [114]February 2016
     * [115]January 2016
     * [116]December 2015
     * [117]November 2015
     * [118]February 2015
     * [119]January 2015
     * [120]November 2014
     * [121]October 2014
     * [122]August 2014
     * [123]July 2014
     * [124]December 2013
     * [125]October 2013
     * [126]July 2013
     * [127]May 2013
     * [128]March 2013
     * [129]February 2013
     * [130]October 2012
     * [131]September 2012
     * [132]August 2012
     * [133]July 2012
     * [134]April 2012
     * [135]January 2012
     * [136]November 2011
     * [137]July 2011
     * [138]June 2011
     * [139]May 2011
     * [140]April 2011
     * [141]March 2011
     * [142]February 2011
     * [143]January 2011
     * [144]December 2010
     * [145]November 2010
     * [146]October 2010
     * [147]September 2010
     * [148]August 2010
     * [149]July 2010
     * [150]June 2010
     * [151]May 2010
     * [152]April 2010
     * [153]March 2010
     * [154]February 2010
     * [155]January 2010
     * [156]December 2009
     * [157]November 2009
     * [158]October 2009
     * [159]August 2009
     * [160]July 2009
     * [161]June 2009
     * [162]May 2009
     * [163]April 2009
     * [164]March 2009
     * [165]February 2009
     * [166]January 2009
     * [167]December 2008
     * [168]November 2008
     * [169]October 2008
     * [170]September 2008
     * [171]August 2008

Recent Posts

     * [172]vSDC, Rank Products and DUD-E
     * [173]Hit Selection When You’re Strapped for Cash
     * [174]Applications Invited for CSA Trust Grant for 2016

Tags

   [175]acs [176]benchmark [177]bibliometrics [178]c++ [179]cdk
   [180]chembl [181]cheminformatics [182]cinf [183]clojure [184]conference
   [185]CRAN [186]database [187]data mining [188]depiction [189]descriptor
   [190]fingerprint [191]google [192]graph [193]hadoop [194]hcs [195]HTS
   [196]java [197]Literature [198]mapreduce [199]network [200]ons
   [201]oracle [202]parallel [203]performance [204]postgres [205]pubchem
   [206]python [207]qsar [208]R [209]REST [210]rnai [211]sali [212]search
   [213]similarity [214]smarts [215]solubility [216]sql [217]substructure
   [218]visualization [219]web service

Meta

     * [220]Register
     * [221]Log in
     * [222]Entries RSS
     * [223]Comments RSS
     * [224]WordPress.org

   The Journalist template by [225]Lucian E. Marin — Built for
   [226]WordPress

References

   1. http://blog.rguha.net/?feed=rss2
   2. http://blog.rguha.net/
   3. http://blog.rguha.net/?p=1567
   4. http://blog.rguha.net/?p=1567#comments
   5. http://blog.rguha.net/?p=1549
   6. http://www.jcheminf.com/content/8/1/1
   7. http://blog.rguha.net/?p=1549
   8. https://en.wikipedia.org/wiki/Rank_product
   9. http://www.jcheminf.com/content/8/1/1
  10. http://dude.docking.org/
  11. http://static-content.springer.com/image/art:10.1186/s13321-016-0112-z/MediaObjects/13321_2016_112_Fig6_HTML.gif
  12. http://blog.rguha.net/wp-content/uploads/2016/02/th0-3.svg
  13. https://gist.github.com/rajarshi/941388d3a3de44846e3c
  14. http://static-content.springer.com/image/art:10.1186/s13321-016-0112-z/MediaObjects/13321_2016_112_Fig6_HTML.gif
  15. https://twitter.com/abhik1368/status/695434094079905792
  16. http://cmib.curie.fr/en/profile/liliane-mouawad-00288
  17. http://static-content.springer.com/image/art:10.1186/s13321-016-0112-z/MediaObjects/13321_2016_112_Fig6_HTML.gif
  18. http://blog.rguha.net/?cat=4
  19. http://blog.rguha.net/?cat=9
  20. http://blog.rguha.net/?tag=virtual-screening
  21. http://blog.rguha.net/?tag=docking
  22. http://blog.rguha.net/?tag=ensemble
  23. http://blog.rguha.net/?p=1549
  24. http://blog.rguha.net/?p=1549#comments
  25. http://www.jcheminf.com/content/8/1/1
  26. http://pubs.acs.org/doi/abs/10.1021/jm050362n
  27. http://www.jcheminf.com/content/8/1/1/figure/F3
  28. https://en.wikipedia.org/wiki/Rank_product
  29. http://cmib.curie.fr/en/download/data/VirtualScreening
  30. http://cmib.curie.fr/en/profile/liliane-mouawad-00288
  31. http://cmib.curie.fr/en/download/data/VirtualScreening
  32. http://blog.rguha.net/?cat=4
  33. http://blog.rguha.net/?cat=5
  34. http://blog.rguha.net/?cat=9
  35. http://blog.rguha.net/?tag=docking
  36. http://blog.rguha.net/?tag=data-science
  37. http://blog.rguha.net/?tag=vs
  38. http://blog.rguha.net/?tag=virtual-screen
  39. http://blog.rguha.net/?tag=ensemble
  40. http://blog.rguha.net/?p=1546
  41. http://blog.rguha.net/?p=1546#respond
  42. mailto:chescot@aol.com
  43. http://blog.rguha.net/?cat=1
  44. http://blog.rguha.net/?tag=award
  45. http://blog.rguha.net/?tag=csa
  46. http://blog.rguha.net/?p=1515
  47. http://blog.rguha.net/?p=1515#respond
  48. http://oasys2.confex.com/acs/229nm/techprogram/S16535.HTM
  49. http://www.nature.com/nrd/journal/v4/n3/full/nrd1683.html
  50. http://acscinf.org/docs/meetings/229nm/presentations/229nm30.pdf
  51. http://link.springer.com/article/10.1007/s10822-005-9010-6
  52. http://link.springer.com/article/10.1007/s10822-005-9013-3
  53. http://pubs.acs.org/doi/abs/10.1021/ci400399a
  54. http://pubs.acs.org/doi/abs/10.1021/ci600383v
  55. http://link.springer.com/article/10.1007/s10822-005-9013-3
  56. http://pubs.acs.org/doi/abs/10.1021/ci600383v
  57. http://www.jcheminf.com/content/1/1/4
  58. http://www.issb.genopole.fr/~faulon/QSAR.php
  59. http://www.biomedcentral.com/1471-2105/16/S18/S6
  60. https://en.wikipedia.org/wiki/Homomorphic_encryption
  61. https://en.wikipedia.org/wiki/Public_key_infrastructure
  62. https://crypto.stanford.edu/craig/
  63. http://blogs.teamb.com/craigstuntz/2010/03/18/38566/
  64. http://www.biomedcentral.com/1471-2105/16/S18/S6
  65. https://en.wikipedia.org/wiki/Tversky_index
  66. http://www.dalkescientific.com/writings/diary/archive/2014/10/17/maccs_key_44.html
  67. http://www.biomedcentral.com/1471-2105/16/S18/S6
  68. http://blog.rguha.net/?cat=4
  69. http://blog.rguha.net/?cat=5
  70. http://blog.rguha.net/?cat=6
  71. http://blog.rguha.net/?cat=9
  72. http://blog.rguha.net/?tag=database
  73. http://blog.rguha.net/?tag=fingerprint
  74. http://blog.rguha.net/?tag=maccs
  75. http://blog.rguha.net/?tag=search
  76. http://blog.rguha.net/?tag=chembl
  77. http://blog.rguha.net/?tag=cryptography
  78. http://blog.rguha.net/?tag=encryption
  79. http://blog.rguha.net/?tag=secure
  80. http://blog.rguha.net/?p=1521
  81. http://blog.rguha.net/?p=1521#respond
  82. https://twitter.com/cispt2
  83. https://twitter.com/hashtag/RealTimeChem?src=hash
  84. https://twitter.com/cispt2/status/683471144415047680
  85. http://www.iupac.org/news/news-detail/article/discovery-and-assignment-of-elements-with-atomic-numbers-113-115-117-and-118.html
  86. https://en.wikipedia.org/wiki/Official_Scrabble_Players_Dictionary
  87. http://www.freescrabbledictionary.com/sowpods/download/sowpods.txt
  88. https://en.wiktionary.org/wiki/abri
  89. https://gist.github.com/rajarshi/22bc51c7f6bd0193601c
  90. http://baoilleach.blogspot.com/
  91. https://twitter.com/baoilleach/status/683951315957972992
  92. https://twitter.com/baoilleach/status/683987882852388864
  93. http://rich.lewis.ml/
  94. https://github.com/rajarshi/elementalwords/pull/1
  95. https://www.wiktionary.org/
  96. https://github.com/rajarshi/elementalwords
  97. http://baoilleach.blogspot.com/
  98. https://twitter.com/baoilleach/status/683951315957972992
  99. http://rich.lewis.ml/
 100. http://blog.rguha.net/?cat=6
 101. http://blog.rguha.net/?tag=scrabble
 102. http://blog.rguha.net/?tag=periodic-table
 103. http://blog.rguha.net/?tag=elements
 104. http://blog.rguha.net/?tag=dictionary
 105. http://blog.rguha.net/?paged=2
 106. http://blog.rguha.net/?page_id=8
 107. http://blog.rguha.net/?page_id=1109
 108. http://chembioinfo.wordpress.com/
 109. http://chem-bla-ics.blogspot.com/
 110. http://pipeline.corante.com/
 111. http://baoilleach.blogspot.com/
 112. http://blog.metamolecular.com/
 113. http://tripod.nih.gov/
 114. http://blog.rguha.net/?m=201602
 115. http://blog.rguha.net/?m=201601
 116. http://blog.rguha.net/?m=201512
 117. http://blog.rguha.net/?m=201511
 118. http://blog.rguha.net/?m=201502
 119. http://blog.rguha.net/?m=201501
 120. http://blog.rguha.net/?m=201411
 121. http://blog.rguha.net/?m=201410
 122. http://blog.rguha.net/?m=201408
 123. http://blog.rguha.net/?m=201407
 124. http://blog.rguha.net/?m=201312
 125. http://blog.rguha.net/?m=201310
 126. http://blog.rguha.net/?m=201307
 127. http://blog.rguha.net/?m=201305
 128. http://blog.rguha.net/?m=201303
 129. http://blog.rguha.net/?m=201302
 130. http://blog.rguha.net/?m=201210
 131. http://blog.rguha.net/?m=201209
 132. http://blog.rguha.net/?m=201208
 133. http://blog.rguha.net/?m=201207
 134. http://blog.rguha.net/?m=201204
 135. http://blog.rguha.net/?m=201201
 136. http://blog.rguha.net/?m=201111
 137. http://blog.rguha.net/?m=201107
 138. http://blog.rguha.net/?m=201106
 139. http://blog.rguha.net/?m=201105
 140. http://blog.rguha.net/?m=201104
 141. http://blog.rguha.net/?m=201103
 142. http://blog.rguha.net/?m=201102
 143. http://blog.rguha.net/?m=201101
 144. http://blog.rguha.net/?m=201012
 145. http://blog.rguha.net/?m=201011
 146. http://blog.rguha.net/?m=201010
 147. http://blog.rguha.net/?m=201009
 148. http://blog.rguha.net/?m=201008
 149. http://blog.rguha.net/?m=201007
 150. http://blog.rguha.net/?m=201006
 151. http://blog.rguha.net/?m=201005
 152. http://blog.rguha.net/?m=201004
 153. http://blog.rguha.net/?m=201003
 154. http://blog.rguha.net/?m=201002
 155. http://blog.rguha.net/?m=201001
 156. http://blog.rguha.net/?m=200912
 157. http://blog.rguha.net/?m=200911
 158. http://blog.rguha.net/?m=200910
 159. http://blog.rguha.net/?m=200908
 160. http://blog.rguha.net/?m=200907
 161. http://blog.rguha.net/?m=200906
 162. http://blog.rguha.net/?m=200905
 163. http://blog.rguha.net/?m=200904
 164. http://blog.rguha.net/?m=200903
 165. http://blog.rguha.net/?m=200902
 166. http://blog.rguha.net/?m=200901
 167. http://blog.rguha.net/?m=200812
 168. http://blog.rguha.net/?m=200811
 169. http://blog.rguha.net/?m=200810
 170. http://blog.rguha.net/?m=200809
 171. http://blog.rguha.net/?m=200808
 172. http://blog.rguha.net/?p=1567
 173. http://blog.rguha.net/?p=1549
 174. http://blog.rguha.net/?p=1546
 175. http://blog.rguha.net/?tag=acs
 176. http://blog.rguha.net/?tag=benchmark
 177. http://blog.rguha.net/?tag=bibliometrics
 178. http://blog.rguha.net/?tag=c
 179. http://blog.rguha.net/?tag=cdk
 180. http://blog.rguha.net/?tag=chembl
 181. http://blog.rguha.net/?tag=cheminformatics-research
 182. http://blog.rguha.net/?tag=cinf
 183. http://blog.rguha.net/?tag=clojure
 184. http://blog.rguha.net/?tag=conference
 185. http://blog.rguha.net/?tag=cran
 186. http://blog.rguha.net/?tag=database
 187. http://blog.rguha.net/?tag=data-mining
 188. http://blog.rguha.net/?tag=depiction
 189. http://blog.rguha.net/?tag=descriptor
 190. http://blog.rguha.net/?tag=fingerprint
 191. http://blog.rguha.net/?tag=google
 192. http://blog.rguha.net/?tag=graph
 193. http://blog.rguha.net/?tag=hadoop
 194. http://blog.rguha.net/?tag=hcs
 195. http://blog.rguha.net/?tag=hts
 196. http://blog.rguha.net/?tag=java
 197. http://blog.rguha.net/?tag=literature
 198. http://blog.rguha.net/?tag=mapreduce
 199. http://blog.rguha.net/?tag=network
 200. http://blog.rguha.net/?tag=ons
 201. http://blog.rguha.net/?tag=oracle
 202. http://blog.rguha.net/?tag=parallel
 203. http://blog.rguha.net/?tag=performance
 204. http://blog.rguha.net/?tag=postgres
 205. http://blog.rguha.net/?tag=pubchem
 206. http://blog.rguha.net/?tag=python
 207. http://blog.rguha.net/?tag=qsar
 208. http://blog.rguha.net/?tag=r
 209. http://blog.rguha.net/?tag=rest
 210. http://blog.rguha.net/?tag=rnai
 211. http://blog.rguha.net/?tag=sali
 212. http://blog.rguha.net/?tag=search
 213. http://blog.rguha.net/?tag=similarity
 214. http://blog.rguha.net/?tag=smarts
 215. http://blog.rguha.net/?tag=solubility
 216. http://blog.rguha.net/?tag=sql
 217. http://blog.rguha.net/?tag=substructure
 218. http://blog.rguha.net/?tag=visualization
 219. http://blog.rguha.net/?tag=web-service
 220. http://blog.rguha.net/wp-login.php?action=register
 221. http://blog.rguha.net/wp-login.php
 222. http://blog.rguha.net/?feed=rss2
 223. http://blog.rguha.net/?feed=comments-rss2
 224. https://wordpress.org/
 225. http://lucianmarin.com/
 226. http://wordpress.org/
